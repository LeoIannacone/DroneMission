ContactSystem DroneMissionSystem -awt -o spaceUpdater [host="localhost" port=8070];

Context subSystemDrone -w;
Context subSystemHeadQuarter -w;
Context subSystemSmartDevice -w;

//		Subsystems -w (window)
Subject smartdevice context subSystemSmartDevice ;
Subject drone context subSystemDrone ;
Subject headQuarter context subSystemHeadQuarter ;

//		Messages
Dispatch photo; 
Request command;
Signal sensorsData;
Signal notify;

//		Highlevel communications
//Drone sends photo
sendDataPhoto: drone forward photo to headQuarter;  
//Headquarter receives photo
receiveDataPhoto: headQuarter serve photo support=TCP [host="localhost" port=4060];

//Drone sends data of sensors
sendsensorsDatas: drone emit sensorsData;
//Headquarter and smartdevice receive data of sensors
headquarterReceivesensorsDatas: headQuarter sense sensorsData;
smartdeviceReceivesensorsDatas: smartdevice sense sensorsData;

//Drone notifies start/end mission
sendnotify: drone emit notify;
//smartdevice receives notifications about mission
smartdeviceReceiveNotify: smartdevice sense notify;

//HeadQuarter sends command
sendCommand: headQuarter demand command to drone;
//Drone receives command
receiveCommand: drone grant command support=TCP [host="localhost" port=4050];


//		Behaviors 
//Behavior of Drone
BehaviorOf drone {
	var String msgCommand = ""
	var String cmdReply = ""
	var boolean droneCheck
	var String sensorsDatas
	var String dataPhoto

	action void startMission()
	action boolean isMissionEnding()
	action void endMission()
	
	// commands
	action String handleCommand(String cmd)
	action boolean isCommandStart(String cmd)
	action String getFailReplyToCommand()
	action String getOkReplyToCommand()
	
	// notify
	action String getNotifyStart()
	action String getNotifyEnd()
	
	// sensors
	action String getDataFromSensors()
	action String getDataPhoto()

	state st_Drone_init initial
		println ("----- Drone Initialized -----")
		goToState st_Drone_ready
	endstate
	
	state st_Drone_ready
		println ("----- Waiting setSpeed -----")
		doInOut receiveCommand()
		set msgCommand = code.curInputMsgContent
		set droneCheck = exec isCommandStart(msgCommand)
		if{ droneCheck == true } {	
			goToState st_Drone_startMission
		}
		replyToRequest command(call getFailReplyToCommand());
		println ("ERROR: expected 'start' command. Received: " + msgCommand)
	endstate
	
	state st_Drone_startMission
		replyToRequest command(call getOkReplyToCommand());
		exec startMission() // contains setspeed and starmission 
		doOut sendnotify(call getNotifyStart())
		goToState st_Drone_onMission
	endstate
	
	state st_Drone_onMission
		// send data sensors
		set sensorsDatas = exec getDataFromSensors()
		doOut sendsensorsDatas(sensorsDatas)
		doOut sendsensorsDatas(sensorsDatas)

		// send photos
		set dataPhoto = exec getDataPhoto()
		doOut sendDataPhoto(dataPhoto) // every x secondi?

		set droneCheck = exec isMissionEnding()
		
		if { droneCheck == true } {
			goToState st_Drone_endMission
		}
		
		// received a command setSpeed or stop?
		onMessage? command goToState st_Drone_commandHandler
	endstate

	state st_Drone_commandHandler
		doInOut receiveCommand()
		set msgCommand = code.curInputMsgContent
		set cmdReply = exec handleCommand(msgCommand)
		replyToRequest command(cmdReply);
		// get back on mission
		goToState st_Drone_onMission
	endstate
	
	state st_Drone_endMission
		// send last data sensors
		set sensorsDatas = exec getDataFromSensors()
		doOut sendsensorsDatas(sensorsDatas)
		doOut sendsensorsDatas(sensorsDatas)
		
		exec endMission() // empty method - maybe can be used in future?
		doOut sendnotify(exec getNotifyEnd())
		transitToEnd
	endstate
}

BehaviorOf headQuarter{
	
	var String command
	var String sensorsDatasReceived
	var String photoReceived
	var String commandAnswer
	var boolean tmpCheck
	var boolean missionEnd
	
	action String getCommandStart()
	action String getCommandToSend()
	action boolean replyIsOk(String reply)
	
	action void updateDashboard(String sensorsDatasReceived)
	action void storeSensorsData(String sensorsDatasReceived)
	
	action void storePhotoData(String photoReceived)
	action void showPicturePackage(String photoReceived)
	
	action boolean missionIsGoingToEnd()
	action void shutdown()
	
	state st_HeadQuarter_init initial
		println ("----- HeadQuarter Initialized -----") 
		goToState st_HeadQuarter_ready
	endstate
	
	state st_HeadQuarter_ready
		println ("----- Ready to send command -----")
		doOutIn sendCommand(exec getCommandStart())
		acquireAnswerFor command
		set commandAnswer = code.curReplyContent
		println("DRONE REPLY: " + commandAnswer)
		set tmpCheck = exec replyIsOk(commandAnswer)
		if { tmpCheck == true } { goToState st_HeadQuarter_onMission }
	endstate
	
	state st_HeadQuarter_onMission
		
		set missionEnd = exec missionIsGoingToEnd()
		if { missionEnd == true } { 
			goToState st_HeadQuarter_endMission
		}

		// get sensors data
		onMessage? sensorsData goToState st_HeadQuarter_receivedSensorsData
		
		// get photos
		onMessage? photo goToState st_HeadQuarter_receivedPhoto

		// check if command is clicked in Dashboard and send it
		set command = exec getCommandToSend()
		doOutIn sendCommand(command)
		acquireAnswerFor command
		set commandAnswer = code.curReplyContent
		set tmpCheck = exec replyIsOk(commandAnswer)
		if { tmpCheck == false } { println("DRONE CMD FAILED: " + commandAnswer) }
				
	endstate
	
	state st_HeadQuarter_receivedSensorsData
		// get sensors data
		doPerceive headquarterReceivesensorsDatas()
		set sensorsDatasReceived = code.curInputMsgContent
		// update Dashboard
		exec updateDashboard(sensorsDatasReceived)
		exec storeSensorsData(sensorsDatasReceived)

		goToState st_HeadQuarter_onMission
	endstate
	
	state st_HeadQuarter_receivedPhoto
		// get photo data
		doIn receiveDataPhoto()
		set photoReceived = code.curInputMsgContent
		
		// store info
		call storePhotoData(photoReceived)
		call showPicturePackage(photoReceived)
		
		goToState st_HeadQuarter_onMission
	endstate
	
	state st_HeadQuarter_endMission
		call shutdown()
		transitToEnd
	endstate
}

BehaviorOf smartdevice {
	
	var String notifyContent
	var String dataDroneReceived 
	var boolean tmpNotify
	
	action void notifyUserMissionStarted()
	action void updateGauges(String data)
	action boolean isNotifyStart(String notify)
	action void missionFinished()
	
	state st_Smartdevice_init initial
		onMessage notify transitTo st_Smartdevice_missionStart
	endstate
	
	state st_Smartdevice_missionStart
		call notifyUserMissionStarted()
		goToState st_Smartdevice_waitingForData
	endstate
	
	state st_Smartdevice_waitingForData
		onMessage? sensorsData goToState st_Smartdevice_receivedData
		onMessage? notify goToState st_Smartdevice_endMission
	endstate
	
	state st_Smartdevice_receivedData
		// get data from drone
		doPerceive smartdeviceReceivesensorsDatas()
		set dataDroneReceived = code.curInputMsgContent
		call updateGauges(dataDroneReceived)

		goToState st_Smartdevice_waitingForData
	endstate
	
	state st_Smartdevice_notifyHandler
		doPerceive smartdeviceReceiveNotify()
		set notifyContent = code.curInputMsgContent
		set tmpNotify = exec isNotifyStart(notifyContent)
		if { tmpNotify == true } { goToState st_Smartdevice_missionStart }
		if { tmpNotify == false } { goToState st_Smartdevice_endMission }
		goToState st_Smartdevice_waitingForData
	endstate
	
	state st_Smartdevice_endMission
		call missionFinished()
		transitToEnd
	endstate
}
