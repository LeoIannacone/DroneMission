ContactSystem HeadQuarterAnalysis -awt -o spaceUpdater [host="localhost" port=8070];

Context subSystemDrone -w;
Context subSystemHeadQuarter -w;
Context subSystemSmartDevice -w;

//		Subsystems -w (window)
Subject smartdevice context subSystemSmartDevice ; //external;
Subject drone context subSystemDrone ; //external;
//Subject headQuarter context subSystemHeadQuarter;

Subject server context subSystemHeadQuarter;
Subject uiLog context subSystemHeadQuarter external;
Subject uiCommand context subSystemHeadQuarter external;
Subject controlUnit context subSystemHeadQuarter; 

//		Messages
Dispatch picturePackage; 
Request command;
Signal sensorsData;
Signal notify;

// User log messages
Request showMeMission;
Request showMeSensorsData;
Request showMePicturePackage;
Request showMeNotifies;

// User command
Request newCommand;

// Server forward command to drone through controlUnit
Request forwardCommand;

//		Highlevel communications
//Drone sends picturePackage
sendDatapicturePackage: drone forward picturePackage to controlUnit;  
//Headquarter receives picturePackage
receiveDatapicturePackage: controlUnit serve picturePackage support=TCP [host="localhost" port=4060];

//Drone sends data of sensors
sendSensorsDatas: drone emit sensorsData;
//Headquarter and smartdevice receive data of sensors
controlUnitReceiveSensorsDatas: controlUnit sense sensorsData;
smartdeviceReceivesensorsDatas: smartdevice sense sensorsData;

//Drone notifies start/end mission
sendnotify: drone emit notify;
//smartdevice receives notifications about mission
smartdeviceReceiveNotify: smartdevice sense notify;

//HeadQuarter sends command
sendCommand: controlUnit demand command to drone;
//Drone receives command
receiveCommand: drone grant command support=TCP [host="localhost" port=4050];

// User communication
// show me something
sendShowMeMission: uiLog demand showMeMission to server;
receiveShowMeMission: server grant showMeMission;

sendShowMeSensorsData: uiLog demand showMeSensorsData to server;
receiveShowMeSensorsData: server grant showMeSensorsData;

sendShowMePackagepicturePackage: uiLog demand showMePicturePackage to server;
receiveShowMePackagepicturePackage: server grant showMePicturePackage;

sendShowMeNotifies: uiLog demand showMeNotifies to server;
receiveShowMeNotifies: server grant showMeNotifies;

// UI send command
sendUINewCommand: uiCommand demand newCommand to server;
receiveUINewCommand: server grant newCommand;

// server sends command to drone handler
sendForwardCommand: server demand forwardCommand to controlUnit;
receiveForwardCommand: controlUnit grant forwardCommand;

BehaviorOf controlUnit {
	
	var String cmd
	var String rpl
	var String sensorsDatasReceived
	var String picturePackageReceived
	
	var boolean tmpCheck
	
	// store mission starts
	action void storeMissionStarted()
	
	// store info from drone
	action void storeDataSensors(String sensorsDatasReceived)
	action void storePicturePackage(String picturePackageReceived)
		
	// check commands to send
	action boolean checkCommandStart(String command)
	action String getWrongStartCommandReply()
	action void storeCommandAndReply(String c, String r)
	
	// shutdown
	action boolean checkEndMission()
	action void shutdown()
	
	state st_controlUnit_init initial
		goToState st_controlUnit_ready
	endstate
	
	state st_controlUnit_ready
		doInOut receiveForwardCommand()
		set tmpCheck = exec checkCommandStart(code.curInputMsgContent)
		if { tmpCheck == true } {
			goToState st_controlUnit_startMission
		}
		if { tmpCheck == false } {
			goToState st_controlUnit_wrongStartCommand
		}
	endstate
	
	state st_controlUnit_startMission
		call storeMissionStarted()
		goToState st_controlUnit_sendCommand
	endstate
	
	// in case of wrong start command received
	state st_controlUnit_wrongStartCommand
		set cmd = code.curInputMsgContent
		set rpl = exec getWrongStartCommandReply()
		replyToRequest forwardCommand(rpl)
		goToState st_controlUnit_ready
	endstate
	
	state st_controlUnit_sendCommand
		set cmd = code.curInputMsgContent
		doOutIn sendCommand(cmd)
		acquireAnswerFor command
		set rpl = code.curInputMsgContent
		call storeCommandAndReply(cmd, rpl)
		replyToRequest forwardCommand(rpl)
		goToState st_controlUnit_onMission
	endstate
	
	state st_controlUnit_onMission
			
		// check if there are commands to send
		onMessage? forwardCommand goToState st_controlUnit_sendCommand
				
		// get picturePackages
		onMessage? picturePackage goToState st_controlUnit_receivedpicturePackage
		
		// get sensors data
		onMessage? sensorsData goToState st_controlUnit_receivedSensorsData
		
		// check if end mission
		set tmpCheck = exec checkEndMission()
		if { tmpCheck == true } {
			goToState st_controlUnit_endMission
		}
		
	endstate
	
	state st_controlUnit_receivedSensorsData
		doPerceive controlUnitReceiveSensorsDatas()
		set sensorsDatasReceived = code.curInputMsgContent
		call storeDataSensors(sensorsDatasReceived)
		goToState st_controlUnit_onMission
	endstate
	
	state st_controlUnit_receivedpicturePackage
		doIn receiveDatapicturePackage()
		set picturePackageReceived = code.curInputMsgContent
		call storePicturePackage(picturePackageReceived)
		goToState st_controlUnit_onMission
	endstate
	
	state st_controlUnit_endMission
		call shutdown()
		transitToEnd
	endstate
}

BehaviorOf server {
	
	var String command
	var String reply
	var String sensorsData
	var String picturePackage
	var String mission

	action String showReplyToCommand(String reply)
	action String getSensorsData(String mission_id)
	action String getPicturePackage(String  mission_id)
	action String getNotifies(String mission_id)
	action String getMission(String mission_id)
	
	state st_Server_init initial 
		goToState st_Server_Handler
	endstate
	
	state st_Server_Handler
		onMessage? newCommand goToState st_Server_forwardCommand
		onMessage? showMeMission goToState st_Server_showMission
		onMessage? showMePicturePackage goToState st_Server_showPicturePackage
		onMessage? showMeSensorsData goToState st_Server_showSensorsData
	endstate
	
	state st_Server_showMission
		doInOut receiveShowMeMission()
		set mission = exec getMission(code.curInputMsgContent)
		replyToRequest showMeMission(mission)
		goToState st_Server_Handler
	endstate
	
	state st_Server_showPicturePackage
		doInOut receiveShowMePackagepicturePackage()
		set picturePackage = exec getPicturePackage(code.curInputMsgContent)
		replyToRequest showMePicturePackage(picturePackage)
		goToState st_Server_Handler
	endstate
	
	state st_Server_showSensorsData
		doInOut receiveShowMeSensorsData()
		set sensorsData = exec getSensorsData(code.curInputMsgContent)
		replyToRequest showMeMission(sensorsData)
		goToState st_Server_Handler
	endstate
	
	state st_Server_forwardCommand
		doInOut receiveUINewCommand()
		set command = code.curInputMsgContent
		doOutIn sendForwardCommand(command)
		acquireAnswerFor forwardCommand
		set reply = code.curInputMsgContent
		exec showReplyToCommand(reply)
		goToState st_Server_Handler
	endstate
		
}

BehaviorOf smartdevice {
	
	var String notifyContent
	var String dataDroneReceived 
	
	action void notifyUserMissionStarted()
	action void updateGauges(String data)
	action void missionFinished()
	
	state st_Smartdevice_init initial
		onMessage notify transitTo st_Smartdevice_missionStart
	endstate
	
	state st_Smartdevice_missionStart
		call notifyUserMissionStarted()
		goToState st_Smartdevice_waitingForData
	endstate
	
	state st_Smartdevice_waitingForData
		onMessage? sensorsData goToState st_Smartdevice_receivedData
		onMessage? notify goToState st_Smartdevice_endMission
	endstate
	
	state st_Smartdevice_receivedData
		// get data from drone
		doPerceive smartdeviceReceivesensorsDatas()
		set dataDroneReceived = code.curInputMsgContent
		showMsg(dataDroneReceived)
		call updateGauges(dataDroneReceived)

		goToState st_Smartdevice_waitingForData
	endstate
	
	state st_Smartdevice_notifyHandler
		doPerceive smartdeviceReceiveNotify()
		set notifyContent = code.curInputMsgContent
		if {notifyContent == "start"} { goToState st_Smartdevice_missionStart }
		if {notifyContent == "end" } { goToState st_Smartdevice_endMission }
		goToState st_Smartdevice_waitingForData
	endstate
	
	state st_Smartdevice_endMission
		call missionFinished()
		transitToEnd
	endstate
}

//		Behaviors 
//Behavior of Drone
BehaviorOf drone {
	var String msgCommand = ""
	var String cmdName = ""
	var String cmdValue = ""

	var boolean start
	var boolean stop
	var boolean speed

	var String sensorsDatas
	var String datapicturePackage

	action void startMission()
	action void endMission()
	action void setSpeed(String value)
	
	action String getDataFromSensors()
	action String getDatapicturePackage()

	state st_Drone_init initial
		println ("----- Drone Initialized -----")
		goToState st_Drone_ready
	endstate
	
	state st_Drone_ready
		println ("----- Waiting setSpeed -----")
		doInOut receiveCommand()
		set msgCommand = call curInputMsg.msgContent()
		set cmdName = call Drone.getCommandName(msgCommand)
		set start = call cmdName.contains("setspeed")
		if{start} {	
			goToState st_Drone_startMission
		}
		replyToRequest command("FAIL");
		println ("ERROR: expected 'setspeed' command to start. Received: " + cmdName)
	endstate
	
	state st_Drone_startMission
		set cmdValue =  call Drone.getCommandValue(code.curInputMsgContent)
		exec setSpeed(cmdValue)
		replyToRequest command("OK");
		exec startMission() // contains setspeed and starmission 
		doOut sendnotify("start")
		goToState st_Drone_onMission
	endstate
	
	state st_Drone_setspeed
		set cmdValue =  call Drone.getCommandValue(code.curInputMsgContent)
		exec setSpeed(cmdValue)
		goToState st_Drone_onMission
	endstate

	state st_Drone_onMission
		// send data sensors
		set sensorsDatas = exec getDataFromSensors()
		doOut sendSensorsDatas(sensorsDatas)

		// send picturePackages
		set datapicturePackage = exec getDatapicturePackage()
		doOut sendDatapicturePackage(datapicturePackage) // every x secondi?

		// received a command setSpeed or stop?
		onMessage? command goToState st_Drone_commandHandler
	endstate

	state st_Drone_commandHandler
		doInOut receiveCommand()
		set cmdName = call Drone.getCommandName(code.curInputMsgContent)
		
		// check if command is correct
		set stop = call cmdName.contains("stop")
		set speed = call cmdName.contains("setspeed")
		if { stop || speed } {
			replyToRequest command ("OK");
			if {stop} { goToState st_Drone_endMission };
			if {speed} { goToState st_Drone_setspeed }
		}
		replyToRequest command("FAIL");
		// get back on mission
		goToState st_Drone_onMission
	endstate
	
	state st_Drone_endMission
		exec endMission() // empty method - maybe can be used in future?
		doOut sendnotify("end")
		transitToEnd
	endstate
}
